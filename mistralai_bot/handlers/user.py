from aiogram import Router, F, html
from aiogram.filters import Command
from aiogram.types import PollAnswer
from aiogram.types import Message, CallbackQuery
from mistralai_bot.utils.logger import logger
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext
from mistralai_bot.orm_query import orm_add, orm_get_one, orm_update
from mistralai_bot.mist_api import api_get
from mistralai_bot.state.states import Load
from mistralai_bot.keyboards.keyboards import Keyboards_all as keyboards
import asyncio
from mistralai_bot.config import bot
import os
from dotenv import load_dotenv

load_dotenv()

ADMIN = int(os.getenv('ADMIN'))
user_router = Router()

models = {
    'codestral': 'cg.codestral-latest',
    'mistral-large': 'cg.mistral-large-latest',
    'mistral-small': 'cg.mistral-small-latest'
}


@user_router.message(Command('start', 'help', 'menu'))
async def help(message: Message, session: AsyncSession):
    username = message.from_user.username
    user_id = message.from_user.id
    keyboard = await keyboards.reply_key_builder('–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å')
    await orm_add(
        session=session, tablename='User',
        data=({
            'tg_id': user_id, 'username': username,
            'role': 'user'}))
    await message.answer(
        text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}!\n"
        "–Ø –±–æ—Ç, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Å API MistralAI. –í—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ –Ω–∞ —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—É—á–∞—Ç—å —Å–≤–æ–π –ò–ò üåö\n"
        "–¢–∞–∫ –∂–µ –ò–ò –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –Ω–µ—Å—Ç–∏ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—É—é –±–µ—Å—Å–º—ã—Å–ª–∏—Ü—É.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å* –∏ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å –±–æ—Ç—É —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å\n"
        "–≠—Ç–æ –Ω–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç MistralAI !!!",
        parse_mode='Markdown',
        reply_markup=keyboard)
    await logger(message, text=message.text)


@user_router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å')
async def change_model(message: Message):
    keyboard = await keyboards.inline_key_builder(models)
    await message.answer(
        text=(
            '–ü–æ—è—Å–Ω—é –ø–æ –∫–Ω–æ–ø–∫–∞–º.\n'
            '*codestral* - –ò–ò –±—É–¥–µ—Ç –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–¥–æ–º.\n'
            '*mistral-large* - –ò–ò –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ —Å —Ç–µ–∫—Å—Ç–æ–º\n'
            '*mistral-small* - –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å—ã...'),
        parse_mode='Markdown',
        reply_markup=keyboard)


@user_router.callback_query(F.data.startswith('cg'))
async def cancel_change_model(callback: CallbackQuery, session: AsyncSession):
    model = callback.data.split('.')
    user_id = callback.from_user.id
    await orm_update(
        tablename='User', session=session,
        filter_arg={'tg_id': user_id},
        new_data={'models': model[1]})
    await callback.message.answer('–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!')


@user_router.message(Load.load)
async def load(message: Message):
    mes = await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...')
    await asyncio.sleep(2)
    await mes.delete()


@user_router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    user_id = poll_answer.user.id
    user_name = poll_answer.user.username
    poll_id = poll_answer.poll_id
    option_ids = poll_answer.option_ids

    await bot.send_message(chat_id=user_id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!')
    await bot.send_message(
        chat_id=ADMIN,
        text=f"User {user_id} (@{user_name}) answered poll {poll_id} with options {option_ids}")


@user_router.message()
async def echo(message: Message, session: AsyncSession, state: FSMContext):
    await state.set_state(Load.load)
    mes = await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞...‚è≥')
    try:
        data = {
            "url": None}

        text = message.text
        entities = message.entities

        for item in entities:
            if item.type in data.keys():
                data[item.type] = item.extract_from(text)

        content_data = {
            'text': str(text).replace(html.quote(data['url']), ''),
            'url': html.quote(data['url'])
        }

        user_data = await orm_get_one(session=session, tablename='User', kwargs=({'tg_id': message.from_user.id}))

        answer_mistral = await api_get(
            api_key=os.getenv('Mistral_API'),
            model=user_data.models,
            content=content_data)

        await orm_add(
            session=session, tablename='Requests',
            data=({
                'tg_id': message.from_user.id,
                'answer':
                    (f'Mistral_AI:\n{answer_mistral}\n\n'),
                'request': str(content_data)
            }))
        for x in range(0, len(answer_mistral), 4096):
            txt = answer_mistral[x: x + 4096]
            await message.answer(txt, parse_mode='MarkdownV2')
    except Exception as ex:
        await bot.send_message(
            chat_id=int(ADMIN),
            text=f'–û—à–∏–±–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message.text}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {str(ex)}')
        await message.answer('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...')
    finally:
        await mes.delete()
        await state.clear()
